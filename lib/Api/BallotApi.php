<?php
/**
 * BallotApi
 * PHP version 7.3
 *
 * @category Class
 * @package  MvApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Majority Judgment API
 *
 * This is a **deliberation service** using **majority judgment** polling. It's **libre software** ([source](https://github.com/mieuxvoter)) made and maintained by [MieuxVoter.fr](https://mieuxvoter.fr). You're browsing the API documentation and sandbox.  ## Use one of the known clients  - https://cli.mieuxvoter.fr   ## Try it out the hard way  ### Create an account  You will need a user account to interact with polls. Head to **Registration** â†’ `POST /users` below. Click _Try it out_, set your desired credentials, and execute the query. Scroll down to see the response.  ### Authenticate  Use your credentials in the **Login** â†’ `POST /_jwt`, and the API will return a Json Web Token valid for one hour. Copy the token (not the whole response, and without quotes) in the field behind the `Authorize ðŸ”’` button, prefixed by the word `Bearer `.  It should look like: `Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJâ€¦`  ### Create a poll  **Poll** â†’ `POST /polls`  Here is an example of what you could send:  ``` {   \"slug\": \"france-presidence-2027\",   \"scope\": \"public\",   \"subject\": \"PrÃ©sidentielle FranÃ§aise 2027\",   \"proposals\": [     {       \"title\": \"Continuer le nÃ©olibÃ©ralisme\"     },     {       \"title\": \"Ne pas prendre plus Ã  la nature que ce qu'elle est capable de renouveler\"     },     {       \"title\": \"Former une AssemblÃ©e Constituante (Liquide)\"     }   ],   \"grades\": [     { \"name\": \"Ã€ Rejeter\", \"level\": 0 },     { \"name\": \"Insuffisant\", \"level\": 1 },     { \"name\": \"Passable\", \"level\": 2 },     { \"name\": \"Assez Bien\", \"level\": 3 },     { \"name\": \"Bien\", \"level\": 4 },     { \"name\": \"TrÃ¨s Bien\", \"level\": 5 },     { \"name\": \"Excellent\", \"level\": 6 }   ] } ```  Keep the response, you'll need the uuids.  ### Invite people to private polls  > TODO: document invitation generation  ### Submit judgments  **Ballot** â†’ `POST /polls/{pollId}/proposals/{proposalId}/ballots`  One request per proposal, for now.  We plan on making an endpoint to submit them all at once.  ### Collect the results  **Result** â†’ `GET /polls/{id}/result`  ## Use a generated client library  - for [php](https://github.com/MieuxVoter/mv-api-client-lib-php) - for [typescript](https://github.com/MieuxVoter/mv-api-client-lib-typescript) - â€¦  There are clients we can generate for most languages. Get in touch if you'd like one in particular! Or clone this project and use `bin/generate-client.bash -t whatever`.
 *
 * The version of the OpenAPI document: 0.0.0-dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MvApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MvApi\ApiException;
use MvApi\Configuration;
use MvApi\HeaderSelector;
use MvApi\ObjectSerializer;

/**
 * BallotApi Class Doc Comment
 *
 * @category Class
 * @package  MvApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BallotApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiPollsProposalsBallotsGetSubresource
     *
     * Retrieves the collection of Ballot resources.
     *
     * @param  string $poll_id Universally Unique IDentifier of the poll. (required)
     * @param  string $proposal_id Universally Unique IDentifier of the proposal. (required)
     * @param  int $page The collection page number (optional, default to 1)
     *
     * @throws \MvApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MvApi\Model\InlineResponse2004
     */
    public function apiPollsProposalsBallotsGetSubresource($poll_id, $proposal_id, $page = 1)
    {
        list($response) = $this->apiPollsProposalsBallotsGetSubresourceWithHttpInfo($poll_id, $proposal_id, $page);
        return $response;
    }

    /**
     * Operation apiPollsProposalsBallotsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Ballot resources.
     *
     * @param  string $poll_id Universally Unique IDentifier of the poll. (required)
     * @param  string $proposal_id Universally Unique IDentifier of the proposal. (required)
     * @param  int $page The collection page number (optional, default to 1)
     *
     * @throws \MvApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MvApi\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiPollsProposalsBallotsGetSubresourceWithHttpInfo($poll_id, $proposal_id, $page = 1)
    {
        $request = $this->apiPollsProposalsBallotsGetSubresourceRequest($poll_id, $proposal_id, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MvApi\Model\InlineResponse2004' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MvApi\Model\InlineResponse2004', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MvApi\Model\InlineResponse2004';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MvApi\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiPollsProposalsBallotsGetSubresourceAsync
     *
     * Retrieves the collection of Ballot resources.
     *
     * @param  string $poll_id Universally Unique IDentifier of the poll. (required)
     * @param  string $proposal_id Universally Unique IDentifier of the proposal. (required)
     * @param  int $page The collection page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPollsProposalsBallotsGetSubresourceAsync($poll_id, $proposal_id, $page = 1)
    {
        return $this->apiPollsProposalsBallotsGetSubresourceAsyncWithHttpInfo($poll_id, $proposal_id, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPollsProposalsBallotsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Ballot resources.
     *
     * @param  string $poll_id Universally Unique IDentifier of the poll. (required)
     * @param  string $proposal_id Universally Unique IDentifier of the proposal. (required)
     * @param  int $page The collection page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPollsProposalsBallotsGetSubresourceAsyncWithHttpInfo($poll_id, $proposal_id, $page = 1)
    {
        $returnType = '\MvApi\Model\InlineResponse2004';
        $request = $this->apiPollsProposalsBallotsGetSubresourceRequest($poll_id, $proposal_id, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPollsProposalsBallotsGetSubresource'
     *
     * @param  string $poll_id Universally Unique IDentifier of the poll. (required)
     * @param  string $proposal_id Universally Unique IDentifier of the proposal. (required)
     * @param  int $page The collection page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiPollsProposalsBallotsGetSubresourceRequest($poll_id, $proposal_id, $page = 1)
    {
        // verify the required parameter 'poll_id' is set
        if ($poll_id === null || (is_array($poll_id) && count($poll_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $poll_id when calling apiPollsProposalsBallotsGetSubresource'
            );
        }
        // verify the required parameter 'proposal_id' is set
        if ($proposal_id === null || (is_array($proposal_id) && count($proposal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proposal_id when calling apiPollsProposalsBallotsGetSubresource'
            );
        }

        $resourcePath = '/polls/{pollId}/proposals/{proposalId}/ballots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }


        // path params
        if ($poll_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pollId' . '}',
                ObjectSerializer::toPathValue($poll_id),
                $resourcePath
            );
        }
        // path params
        if ($proposal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proposalId' . '}',
                ObjectSerializer::toPathValue($proposal_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiProposalsBallotsGetSubresource
     *
     * Retrieves the collection of Ballot resources.
     *
     * @param  string $id Universally Unique IDentifier (UUID) (required)
     * @param  int $page The collection page number (optional, default to 1)
     *
     * @throws \MvApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MvApi\Model\InlineResponse2004
     */
    public function apiProposalsBallotsGetSubresource($id, $page = 1)
    {
        list($response) = $this->apiProposalsBallotsGetSubresourceWithHttpInfo($id, $page);
        return $response;
    }

    /**
     * Operation apiProposalsBallotsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Ballot resources.
     *
     * @param  string $id Universally Unique IDentifier (UUID) (required)
     * @param  int $page The collection page number (optional, default to 1)
     *
     * @throws \MvApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MvApi\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiProposalsBallotsGetSubresourceWithHttpInfo($id, $page = 1)
    {
        $request = $this->apiProposalsBallotsGetSubresourceRequest($id, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MvApi\Model\InlineResponse2004' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MvApi\Model\InlineResponse2004', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MvApi\Model\InlineResponse2004';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MvApi\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiProposalsBallotsGetSubresourceAsync
     *
     * Retrieves the collection of Ballot resources.
     *
     * @param  string $id Universally Unique IDentifier (UUID) (required)
     * @param  int $page The collection page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProposalsBallotsGetSubresourceAsync($id, $page = 1)
    {
        return $this->apiProposalsBallotsGetSubresourceAsyncWithHttpInfo($id, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiProposalsBallotsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Ballot resources.
     *
     * @param  string $id Universally Unique IDentifier (UUID) (required)
     * @param  int $page The collection page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiProposalsBallotsGetSubresourceAsyncWithHttpInfo($id, $page = 1)
    {
        $returnType = '\MvApi\Model\InlineResponse2004';
        $request = $this->apiProposalsBallotsGetSubresourceRequest($id, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiProposalsBallotsGetSubresource'
     *
     * @param  string $id Universally Unique IDentifier (UUID) (required)
     * @param  int $page The collection page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiProposalsBallotsGetSubresourceRequest($id, $page = 1)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiProposalsBallotsGetSubresource'
            );
        }

        $resourcePath = '/proposals/{id}/ballots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBallotItem
     *
     * Removes the Ballot resource.
     *
     * @param  string $id Universally Unique IDentifier (UUID) (required)
     *
     * @throws \MvApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteBallotItem($id)
    {
        $this->deleteBallotItemWithHttpInfo($id);
    }

    /**
     * Operation deleteBallotItemWithHttpInfo
     *
     * Removes the Ballot resource.
     *
     * @param  string $id Universally Unique IDentifier (UUID) (required)
     *
     * @throws \MvApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBallotItemWithHttpInfo($id)
    {
        $request = $this->deleteBallotItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBallotItemAsync
     *
     * Removes the Ballot resource.
     *
     * @param  string $id Universally Unique IDentifier (UUID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBallotItemAsync($id)
    {
        return $this->deleteBallotItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBallotItemAsyncWithHttpInfo
     *
     * Removes the Ballot resource.
     *
     * @param  string $id Universally Unique IDentifier (UUID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBallotItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteBallotItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBallotItem'
     *
     * @param  string $id Universally Unique IDentifier (UUID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBallotItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteBallotItem'
            );
        }

        $resourcePath = '/ballots/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBallotItem
     *
     * Retrieves a Ballot resource.
     *
     * @param  string $id Universally Unique IDentifier (UUID) (required)
     *
     * @throws \MvApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MvApi\Model\BallotJsonldRead
     */
    public function getBallotItem($id)
    {
        list($response) = $this->getBallotItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getBallotItemWithHttpInfo
     *
     * Retrieves a Ballot resource.
     *
     * @param  string $id Universally Unique IDentifier (UUID) (required)
     *
     * @throws \MvApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MvApi\Model\BallotJsonldRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBallotItemWithHttpInfo($id)
    {
        $request = $this->getBallotItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MvApi\Model\BallotJsonldRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MvApi\Model\BallotJsonldRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MvApi\Model\BallotJsonldRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MvApi\Model\BallotJsonldRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBallotItemAsync
     *
     * Retrieves a Ballot resource.
     *
     * @param  string $id Universally Unique IDentifier (UUID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBallotItemAsync($id)
    {
        return $this->getBallotItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBallotItemAsyncWithHttpInfo
     *
     * Retrieves a Ballot resource.
     *
     * @param  string $id Universally Unique IDentifier (UUID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBallotItemAsyncWithHttpInfo($id)
    {
        $returnType = '\MvApi\Model\BallotJsonldRead';
        $request = $this->getBallotItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBallotItem'
     *
     * @param  string $id Universally Unique IDentifier (UUID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBallotItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getBallotItem'
            );
        }

        $resourcePath = '/ballots/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBallotCollection
     *
     * Creates a Ballot resource.
     *
     * @param  string $poll_id Universally Unique IDentifier of the poll whose proposal we are judging. (required)
     * @param  string $proposal_id Universally Unique IDentifier of the proposal we are judging. (required)
     * @param  \MvApi\Model\BallotJsonldCreate $ballot_jsonld_create The new Ballot resource (optional)
     *
     * @throws \MvApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MvApi\Model\BallotJsonldCreated
     */
    public function postBallotCollection($poll_id, $proposal_id, $ballot_jsonld_create = null)
    {
        list($response) = $this->postBallotCollectionWithHttpInfo($poll_id, $proposal_id, $ballot_jsonld_create);
        return $response;
    }

    /**
     * Operation postBallotCollectionWithHttpInfo
     *
     * Creates a Ballot resource.
     *
     * @param  string $poll_id Universally Unique IDentifier of the poll whose proposal we are judging. (required)
     * @param  string $proposal_id Universally Unique IDentifier of the proposal we are judging. (required)
     * @param  \MvApi\Model\BallotJsonldCreate $ballot_jsonld_create The new Ballot resource (optional)
     *
     * @throws \MvApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MvApi\Model\BallotJsonldCreated, HTTP status code, HTTP response headers (array of strings)
     */
    public function postBallotCollectionWithHttpInfo($poll_id, $proposal_id, $ballot_jsonld_create = null)
    {
        $request = $this->postBallotCollectionRequest($poll_id, $proposal_id, $ballot_jsonld_create);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\MvApi\Model\BallotJsonldCreated' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MvApi\Model\BallotJsonldCreated', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MvApi\Model\BallotJsonldCreated';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MvApi\Model\BallotJsonldCreated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postBallotCollectionAsync
     *
     * Creates a Ballot resource.
     *
     * @param  string $poll_id Universally Unique IDentifier of the poll whose proposal we are judging. (required)
     * @param  string $proposal_id Universally Unique IDentifier of the proposal we are judging. (required)
     * @param  \MvApi\Model\BallotJsonldCreate $ballot_jsonld_create The new Ballot resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBallotCollectionAsync($poll_id, $proposal_id, $ballot_jsonld_create = null)
    {
        return $this->postBallotCollectionAsyncWithHttpInfo($poll_id, $proposal_id, $ballot_jsonld_create)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBallotCollectionAsyncWithHttpInfo
     *
     * Creates a Ballot resource.
     *
     * @param  string $poll_id Universally Unique IDentifier of the poll whose proposal we are judging. (required)
     * @param  string $proposal_id Universally Unique IDentifier of the proposal we are judging. (required)
     * @param  \MvApi\Model\BallotJsonldCreate $ballot_jsonld_create The new Ballot resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBallotCollectionAsyncWithHttpInfo($poll_id, $proposal_id, $ballot_jsonld_create = null)
    {
        $returnType = '\MvApi\Model\BallotJsonldCreated';
        $request = $this->postBallotCollectionRequest($poll_id, $proposal_id, $ballot_jsonld_create);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBallotCollection'
     *
     * @param  string $poll_id Universally Unique IDentifier of the poll whose proposal we are judging. (required)
     * @param  string $proposal_id Universally Unique IDentifier of the proposal we are judging. (required)
     * @param  \MvApi\Model\BallotJsonldCreate $ballot_jsonld_create The new Ballot resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postBallotCollectionRequest($poll_id, $proposal_id, $ballot_jsonld_create = null)
    {
        // verify the required parameter 'poll_id' is set
        if ($poll_id === null || (is_array($poll_id) && count($poll_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $poll_id when calling postBallotCollection'
            );
        }
        // verify the required parameter 'proposal_id' is set
        if ($proposal_id === null || (is_array($proposal_id) && count($proposal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proposal_id when calling postBallotCollection'
            );
        }

        $resourcePath = '/polls/{pollId}/proposals/{proposalId}/ballots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($poll_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pollId' . '}',
                ObjectSerializer::toPathValue($poll_id),
                $resourcePath
            );
        }
        // path params
        if ($proposal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proposalId' . '}',
                ObjectSerializer::toPathValue($proposal_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                ['application/ld+json', 'application/json', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($ballot_jsonld_create)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($ballot_jsonld_create));
            } else {
                $httpBody = $ballot_jsonld_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
